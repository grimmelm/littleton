open Term
open Classgift

module U = UnnamedTerm
module N = NamedTerm
module F = Family
module CG = ClassGifts

(* AM: mostly autogenerated mli *)

module CGI :
  sig
    val cgi_apply :
      (Common.description -> Event.history -> 'a) ->
      Interest.unnamed_interest -> 'a
    val eval : Interest.unnamed_interest -> Common.holder Common.shares
    val always : Interest.unnamed_interest -> Common.holder Common.shares
    val closed : Interest.unnamed_interest -> bool
    val empty : Interest.unnamed_interest -> bool
    val track :
      Interest.unnamed_interest -> (Common.holder * Classify.share_t) list
    val possibly_fail_ascertain : Interest.unnamed_interest -> bool
    val possibly_remote_ascertain : Interest.unnamed_interest -> bool
  end
module type FORWARD =
  sig
    type t
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Reachability :
  sig
    type t = bool
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Possessory :
  sig
    type t = bool
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Divesting :
  sig
    type t = Classify.divest_t
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module FeeSimpleDeterminable :
  sig
    type t = bool * bool
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module ImplicitCondition :
  sig
    type t = bool
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Wait :
  sig
    type t = bool
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Remote :
  sig
    type t = Classify.remoteness
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val init : t
    val zero : t
    val before : U.t -> t -> t
    val f_or : t -> t -> t
    val after : U.t -> t -> t -> t
  end
module Annotation :
  sig
    module R = Reachability
    module P = Possessory
    module D = Divesting
    module F = FeeSimpleDeterminable
    module I = ImplicitCondition
    module W = Wait
    module RM = Remote
    type forward_t = {
      r : bool;
      p : bool;
      d : D.t;
      fsd : F.t;
      imcp : bool;
      wait : bool;
      rap : Classify.remoteness;
    }
    type downward_t = {
      q : Classify.duration;
      i : bool;
      excp : bool;
      asc : bool;
      op : bool;
      div : bool;
    }
    type backward_t = { ar : bool; l : Classify.FullDuration.t; }
    val name : U.t -> N.t
    val unname_i : Interest.named_interest -> Interest.unnamed_interest
    val unname_c : 'a * 'b -> 'a
    val unname : N.t -> U.t
  end
