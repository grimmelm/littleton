open Common
open Event
open Classgift

(* AM: mostly autogenerated mli *)

module AtomicPredicate :
  sig
    module CG = ClassGifts
    module D = Description
    module ESet = EventSet
    module F = Family
    module P = Person
    module E =  Event
    type t =
        IsAlive of P.t
      | HasIssue of P.t
      | Survives of P.t * P.t
      | Marry of P.t * P.t option
      | IsMarried of P.t * P.t option
      | Divorce of P.t * P.t option
      | Consume of P.t * string
      | Graduate of P.t * string
      | UsedAs of string
      | State of string
      | Reentry of P.t
      | Years of int
      | Known of D.t
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val to_string : ?negated:bool -> ?past:bool -> t -> string
    val events : t -> ESet.t
    val eval : t -> E.t list -> bool
    val always : t -> E.t list -> bool
    val never : t -> E.t list -> bool
    val must_wait : t -> bool
    val possibly_remote : t -> E.t list -> bool
  end
module Predicate :
  sig
    module ESet = EventSet
    module A = AtomicPredicate
    module E = Event
    type t =
        True
      | False
      | Atomic of A.t
      | Occurs of E.t
      | Past of t
      | Not of t
      | Or of t * t
      | And of t * t
      | Never of t
    val t_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> t
    val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t
    val to_string : t -> string
    val to_json : t -> string
    val events : t -> ESet.t
    val ( <=> ) : E.t -> E.t -> bool
    val eval : t -> E.t list -> bool
    val simplify : t -> E.t list -> t
    val always : t -> E.t list -> bool
    val never : t -> E.t list -> bool
    val possibly_remote : t -> E.t list -> bool
    val must_wait : t -> bool
    val implies : 'a -> 'b -> bool
  end
module PredicateType = Predicate
type predicate = PredicateType.t
val predicate_of_sexp : Ppx_sexp_conv_lib.Sexp.t -> predicate
val sexp_of_predicate : predicate -> Ppx_sexp_conv_lib.Sexp.t
